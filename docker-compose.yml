version: "3.9" # Versión del archivo de configuración de Docker Compose
services: # Definición de los servicios que componen la aplicación
  spring-api-image: # Nombre del servicio
    image: spring-api-image # Nombre de la imagen
    container_name: spring-api-container # Nombre del contenedor
    build: # Construcción de la imagen
      context: . # a partir de que lo vamos a construir, el dockerfile
      dockerfile: Dockerfile # Nombre del Dockerfile
    ports:
      - "8080:8080" #Puerto local y de docker
    networks:
      - spring-network # Red a la que se conecta el servicio
    depends_on:
      mongodb: # Dependencia del servicio mongodb
        condition: service_healthy # Condición de salud del servicio mongodb
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://rootalkemy:passwordroot@mongodb:27017/tienda?authSource=admin # URI de conexión a MongoDB
  mongodb:
    image: mongodb/mongodb-atlas-local # Imagen de MongoDB
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootalkemy
      - MONGO_INITDB_ROOT_PASSWORD=passwordroot
      - MONGO_INITDB_DATABASE=tienda # Base de datos inicial
    ports:
      - "27019:27017" # Puerto local y de docker para MongoDB definimos dos puertos distintos.
    networks:
      - spring-network # Red a la que se conecta el servicio
    volumes:
      - data:/data/db # Volumen para persistencia de datos
      - config:/data/configdb # Volumen para configuración de MongoDB
    healthcheck:
      test: [ "CMD", "mongosh", "-u", "user", "-p", "pass", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 30s
      retries: 10
networks:
  spring-network: # Definición de la red a la que se conectan los servicios
    driver: bridge # Tipo de red, en este caso una red puente
volumes:
  data: # Volumen para persistencia de datos de MongoDB
  config: # Volumen para configuración de MongoDB
